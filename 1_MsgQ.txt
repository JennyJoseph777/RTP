#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<fcntl.h>
#include<errno.h>
#include<pthread.h>
#include<semaphore.h>
#include<wiringPi.h>
#include<time.h>
#include<mqueue.h>

#define PMODE 0660
#define MSGSIZE 10
#define NUM_THREADS 2
#define Yellow     0
#define Green     1

struct timeval tt1, tt2;
long difference;

mqd_t mqfd, mqfd1;

pthread_t thread_array[NUM_THREADS];

 //..................................................1................................................

void * conveyorBelt(void * arg)
    {
        char msg_buffer[10] = "thread1";
        int status = 0;
        char msgrec[20];
        while (1) 
	{
            gettimeofday(&tt1, NULL);
            delay(2000);

            status = mq_send(mqfd, msg_buffer, 5, 0);
            if (status == -1)
                perror("mq_send failure\n");
            else
                printf("mq_sent successfully\n");
            if (mq_receive(mqfd1, msgrec, 20, NULL) == -1) 
                {
                perror("Error reading");
                }
            digitalWrite(Yellow, HIGH); // On
            delay(1000); // mS
            digitalWrite(Yellow, LOW); // Off
        }
            pthread_exit(NULL);
    }

    //......................................................2...................................

void * Capping(void * arg) {
        int status = 0;
        char msgrec[30];
        char msg_buffer[10] = "Capped.";
        while (1) 
        {

            if (mq_receive(mqfd, msgrec, 20, NULL) == -1)
            {
                perror("Error reading");
            }
            gettimeofday(&tt2, NULL);
            difference = ((tt2.tv_sec - tt1.tv_sec)*1000000) + (tt2.tv_usec - tt1.tv_usec);
            printf("Time difference in seconds/microseconds = %ld \n", difference);
	    printf("Bottle reached, and waiting to be capped. \n");

            digitalWrite(Green, HIGH); // On
            delay(1000); // mS
            digitalWrite(Green, LOW); // Off
            //printf("Green LED \n");

            delay(3000);
            printf("Bottle Capped. \n");

            status = mq_send(mqfd1, msg_buffer, 7, 1);
            if (status == -1)
                perror("mq_send failure\n");
            else
                printf("mq_sent successfully\n");

        }
            pthread_exit(NULL);
    }

  //....................................................main........................................

int main(int argc, char * argv[])
{
    if (wiringPiSetup() == -1)
        exit(1);
    pinMode(Yellow, OUTPUT);
    pinMode(Green, OUTPUT);
    digitalWrite(Yellow, 0);
    digitalWrite(Green, 0);
    int iter, i;
    int status = 0;
    struct mq_attr attr;
    attr.mq_maxmsg = 10;
    attr.mq_msgsize = 20;
    attr.mq_flags = 0;
    attr.mq_curmsgs = 0;
    mqfd = mq_open("/mqsend1", O_CREAT | O_RDWR, PMODE, & attr);
    mqfd1 = mq_open("/mqsend2", O_CREAT | O_RDWR, PMODE, & attr);
    if (mqfd == -1)
    {
        perror("mq_open failure from main");
        exit(1);
    }
    if (pthread_create( & thread_array[0], NULL, conveyorBelt, (void * ) 0)) 
    {
        printf("Error creating thread");
        exit(-1);
    }
    if (pthread_create( & thread_array[1], NULL, Capping, (void * ) 1)) 
    {
        printf("Error creating thread");
        exit(-1);
    }
    for (iter = 0; iter < NUM_THREADS; iter++) 
    {
        if (pthread_join(thread_array[iter], NULL)) 
    {
            printf("Error joining thread");
            exit(-1);
    }
    }

    printf("All threads completed.\n\n");

    return 0;
}