#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<fcntl.h>
#include<errno.h>
#include<pthread.h>
#include<semaphore.h>
#include<sched.h>
#include<wiringPi.h>
#include<time.h>

#define NUM_THREADS 3
#define Yellow     0
#define Green     1

sem_t mutex1, mutex2;
struct timeval tt1,tt2;
long  difference;
int num;
float radius = 2, height = 4;
float surface_area, volume;
pthread_t thread_array[NUM_THREADS];

pthread_attr_t rt_sched_attr; 
pthread_attr_t main_sched_attr; 
int rt_max_prio, rt_min_prio;
struct sched_param rt_param;
struct sched_param main_param;


//.................................................1................................

void *Thread1(void *arg)
{
    	
        gettimeofday(&tt1, NULL);
        sleep(2); 
        sem_post(&mutex1);
        sem_wait(&mutex2);
		//**add it here**
		
    surface_area = 2 * (22 / 7) * radius * (radius + height);
    volume = (22 / 7) * radius * radius * height;
    printf("Surface area of cylinder is: %.3f", surface_area);
    printf("\n Volume of cylinder is : %.3f", volume);
         
		pthread_exit(NULL);
}

//.......................................................2.........................

void *Thread2(void *arg)
{
        sleep (1);
		
        sem_wait(&mutex1);
        gettimeofday(&tt2, NULL);
        difference = ((tt2.tv_sec - tt1.tv_sec)*1000000) + (tt2.tv_usec - tt1.tv_usec);
        printf("Time difference in seconds/microseconds = %ld \n",difference);
	
	//**add it here**
    surface_area =  4 * (22/7) * radius * radius;
    volume = (4.0/3) * (22/7) * radius * radius * radius;
    printf("Surface area of sphere is: %.3f", surface_area);
    printf("\n Volume of sphere is : %.3f", volume);
	
    
		sem_post(&mutex2);

		pthread_exit(NULL);
}

//........................................................3...................................

void *Thread3(void *num) 
{
	int a = 1, b = 1;
	int i;

	int n = (int) num;
	for (i = 3; i <= n; i++)
	{
        int c = a + b;
        a = b;
        b = c;
	}
	return NULL;           
}

//.................................................main....................................

int main(int argc, char *argv[])
{
	wiringPiSetup () ;
	pinMode (Yellow, OUTPUT) ;
	pinMode (Green, OUTPUT) ;
        int iter, i, rc ,scope;
        sem_init(&mutex1, 0, 0);
        sem_init(&mutex2, 0, 0);

	pthread_attr_init(&rt_sched_attr);
        pthread_attr_init(&main_sched_attr);
        pthread_attr_setinheritsched(&rt_sched_attr, PTHREAD_EXPLICIT_SCHED);
        pthread_attr_setschedpolicy(&rt_sched_attr, SCHED_FIFO);
        pthread_attr_setinheritsched(&main_sched_attr, PTHREAD_EXPLICIT_SCHED);
        pthread_attr_setschedpolicy(&main_sched_attr, SCHED_FIFO);
        rt_max_prio = sched_get_priority_max(SCHED_FIFO);
        rt_min_prio = sched_get_priority_min(SCHED_FIFO);


        rt_param.sched_priority = rt_max_prio-1;
        pthread_attr_setschedparam(&rt_sched_attr, &rt_param);

        main_param.sched_priority = rt_max_prio;
        pthread_attr_setschedparam(&main_sched_attr, &main_param);


        if (pthread_create(&thread_array[0], NULL, Thread1, (void *)0)) 
        {
                printf("Error creating thread1");
                exit(-1);
        }
        if (pthread_create(&thread_array[1], NULL, Thread2, (void *)1))
        {
                printf("Error creating thread2");
                exit(-1);
        }
		if (pthread_create(&thread_array[1], NULL, Thread3, (void *)1))
        {
                printf("Error creating thread3");
                exit(-1);
        }
		
 	for(iter=0; iter<NUM_THREADS ; iter++)
        {
                if (pthread_join(thread_array[iter], NULL))
                {
                    printf("Error joining thread");
                    exit(-1);
                }
        }

		    printf("Task completed.\n\n");

		    return 0;

}